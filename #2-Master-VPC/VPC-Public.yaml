#Template created by hash
Description: Create a VPC with three public and private subnets, DHCP Options, IGW, VGW, enables Flow Logs
Parameters:
# Network Parameters
  VPCOctet:
    Type: String
    MinLength: '4'
    MaxLength: '8'
    AllowedPattern: "\\d{2,3}\\.\\d{1,3}"
    ConstraintDescription: Must be the first two octets only without a trailing full stop
  VPCCIDR:
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
  PublicSubnetACIDR:
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
  PublicSubnetBCIDR:
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
  PublicSubnetCCIDR:
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
  PrivateSubnetACIDR:
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 0.96/27
  PrivateSubnetBCIDR:
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 0.128/27
  PrivateSubnetCCIDR:
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 0.160/27
  DNSServers:
    Type: String
  DNSDomainName:
    Type: String
    MinLength: '3'
    MaxLength: '25'
    AllowedPattern: "[a-zA-Z0-9]+\\..+"

# Enter the output arn from standalone IAM-Role-FlowLogs.yaml template.
  FlowLogsARN:
    Type: String

# Tagging specific options
  Environment:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    AllowedValues:
      - Production
      - UAT
      - Test
  BusinessUnit:
    Type: String
    AllowedValues:
      - Charitable
      - Corporate
      - Gaming
      - Lotteries
      - Wagering
    ConstraintDescription: Must be Charitable | Corporate | Gaming | Lotteries | Wagering
  Department:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: BrandName
  Application:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: SomePlatform

Resources:

# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join [ ".", [ !Ref VPCOctet, !Ref VPCCIDR ] ]
      InstanceTenancy: default
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-${Application}-VPC
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
# Enable Flow Logs on the VPC
  FlowLogs:
    Type: AWS::EC2::FlowLog
    DependsOn: VPC
    Properties:
      DeliverLogsPermissionArn: !Ref FlowLogsARN
      LogGroupName: !Sub ${Environment}-${Application}-FlowLogs
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

# Public subnets
  PublicA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: VPCOctet
          - Ref: PublicSubnetACIDR
      AvailabilityZone: ap-southeast-2a
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-Public-A
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
  PublicB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: VPCOctet
          - Ref: PublicSubnetBCIDR
      AvailabilityZone: ap-southeast-2b
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-Public-B
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
  PublicC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: VPCOctet
          - Ref: PublicSubnetCCIDR
      AvailabilityZone: ap-southeast-2c
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-Public-C
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
# Private Subnets
  PrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: VPCOctet
          - Ref: PrivateSubnetACIDR
      AvailabilityZone: ap-southeast-2a
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-Private-A
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
  PrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: VPCOctet
          - Ref: PrivateSubnetBCIDR
      AvailabilityZone: ap-southeast-2b
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-Private-B
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
  PrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: VPCOctet
          - Ref: PrivateSubnetCCIDR
      AvailabilityZone: ap-southeast-2c
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-Private-C
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application

  # Create Internet Gateway and attach it to the VPC
  VPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref Environment, !Ref BusinessUnit, IGW ]]
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
  AttachIGWtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: VPCIGW
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref VPCIGW

  # Create DHCP Option Set for VPC
  VPCDHCP:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Ref DNSDomainName
      DomainNameServers:
      - Ref: DNSServers
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-${Application}-IGW
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
  AssocVPCDHCPtoVPC:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref VPCDHCP

  # Create Virtual Gateway and attach it to the VPC. Required for DCHash2 to Direct Connect
  VGW:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-${Application}-VGW
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
  VPNGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      VpnGatewayId: !Ref VGW

Outputs:
  VPCID:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
    Description: ID of the VPC deployed
  VPCCIDR:
    Value: !Join [ ".", [ !Ref VPCOctet, !Ref VPCCIDR ] ]
    Export:
      Name: !Sub "${AWS::StackName}-VPCCIDR"
  IGWID:
    Value: !Ref VPCIGW
    Export:
      Name: !Sub "${AWS::StackName}-IGWID"
    Description: IGW ID for the VPC
  VGWID:
    Value: !Ref VGW
    Export:
      Name: !Sub "${AWS::StackName}-VGWID"
    Description: VGW ID for the VPC
  PublicSubnetIDs:
    Value:
      Fn::Join:
      - ","
      - - Ref: PublicA
        - Ref: PublicB
        - Ref: PublicC
    Description: Comma separated list of Public subnets
  ProdApplicationSubnetIDs:
    Value:
      Fn::Join:
      - ","
      - - Ref: PrivateA
        - Ref: PrivateB
        - Ref: PrivateC
    Description: Comma separated list of Prod Application subnets
  PublicSubnetA:
    Value: !Ref PublicA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetA"
  PublicSubnetB:
    Value: !Ref PublicB
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetB"
  PublicSubnetC:
    Value: !Ref PublicC
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetC"
  PrivateSubnetA:
    Value: !Ref PrivateA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"
  PrivateSubnetB:
    Value: !Ref PrivateB
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetB"
  PrivateSubnetC:
    Value: !Ref PrivateC
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetC"
