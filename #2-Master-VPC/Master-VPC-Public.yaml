# Template created by hash
Description: Creates a VPC, Subnets, IGW, VGW, Route Tables, NAT Gateways, NACLs
Parameters:
# CloudFormation URL Parameters
  VPCTemplateFile:
    Type: String
    Description: Filename of the VPC template including file extension
    Default: VPC-Public.yaml
  RouteTableTemplateFile:
    Type: String
    Description: Filename of the Route Tables with S3 Endpoint template
    Default: VPC-RouteTable-S3Endpoint.yaml
  NATGatewayTemplateFile:
    Type: String
    Description: Filename for the NAT Gateways template
    Default: VPC-NATGateway.yaml
  NACLTemplateFile:
    Type: String
    Description: Filename of the NACL template
    Default: VPC-NACLs.yaml
  BuildBucket:
    Description: Name of the build bucket containing the CloudFormation templates
    Type: String
    Default: dchash2buildbucket

  # Cross-Stack Parameters
  # Not in use in Non-Production as the DCHash2-NonProd CFN stack created the role but did not output the ARN
  # For account XXXXXXXXXXXX use hard-coded arn:aws:iam::XXXXXXXXXXXX:role/Flow-Logs-Role This is non-prod account
  IAMFlowLogsRole:
    Description: Name of the CloudFormation Stack that created the IAM Flow Logs Role
    Type: String
    #Default: ''
    Default: IAM-Role-FlowLogs

# Tagging Parameters
  Environment:
    Description: Production or UAT or Test
    Type: String
    Default: UAT
    AllowedValues:
      - Production
      - UAT
      - Test
  BusinessUnit:
    Description: Some Group Business Unit
    Type: String
    Default: Gaming
    AllowedValues:
      - Charitable
      - Corporate
      - Gaming
      - Lotteries
      - Wagering
    ConstraintDescription: Must be Charitable | Corporate | Gaming | Lotteries | Wagering
  Department:
    Description: Department
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: BrandName
  Application:
    Description: Specific Application
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: SomePlatform

# VPC Template Parameters
  VPCOctet:
    Description: First two octets of the VPC CIDR (e.g. 172.16)
    Type: String
    MinLength: '4'
    MaxLength: '8'
    AllowedPattern: "\\d{2,3}\\.\\d{1,3}"
    ConstraintDescription: Must be the first two octets only without a trailing full stop
    Default: 10.127
  VPCCIDR:
    Description: Last two octets and netmask of the CIDR of the VPC (e.g. 0.0/16)
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 6.0/23
  PublicSubnetACIDR:
    Description: Last two octets and netmask of the CIDR of Public Subnet in AZ A (e.g. 0.0/24)
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 6.0/27
  PublicSubnetBCIDR:
    Description: Last two octets and netmask of the CIDR of Public Subnet in AZ B (e.g. 1.0/24)
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 6.32/27
  PublicSubnetCCIDR:
    Description: Last two octets and netmask of the CIDR of Public Subnet in AZ C (e.g. 2.0/24)
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 6.64/27
  PrivateSubnetACIDR:
    Description: Last two octets and netmask of the CIDR of Private Subnet in AZ A (e.g. 3.0/24)
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 6.128/25
  PrivateSubnetBCIDR:
    Description: Last two octets and netmask of the CIDR of Private Subnet in AZ B (e.g. 4.0/24)
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 7.0/25
  PrivateSubnetCCIDR:
    Description: Last two octets and netmask of the CIDR of Private Subnet in AZ C (e.g. 5.0/24)
    Type: String
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must match standard CIDR format including the netmask
    Default: 7.128/25
  DNSServers:
    Default: AmazonProvidedDNS
    Type: String
#    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3},\\d{2,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3},AmazonProvidedDNS"
    Description: Comma separated list of DNS server IP addresses with no spaces. Final address should be AmazonProvidedDNS
  DNSDomainName:
    Description: Fully qualified domain name (FQDN) of the root domain e.g. example.com
    Type: String
    MinLength: '3'
    MaxLength: '25'
    AllowedPattern: "[a-zA-Z0-9]+\\..+"
    Default: uat.alveo.local

# Parameter Grouping
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: CloudFormation Template Files and Location
      Parameters:
      - VPCTemplateFile
      - RouteTableTemplateFile
      - NATGatewayTemplateFile
      - NACLTemplateFile
      - BuildBucket
      - IAMFlowLogsRole
    - Label:
        default: Tagging Parameters
      Parameters:
      - Environment
      - BusinessUnit
      - Department
      - Application
    - Label:
        default: VPC DNS Configuration
      Parameters:
      - DNSServers
      - DNSDomainName
    - Label:
        default: VPC Network Configuration
      Parameters:
      - VPCOctet
      - VPCCIDR
      - PublicSubnetACIDR
      - PublicSubnetBCIDR
      - PublicSubnetCCIDR
      - PrivateSubnetACIDR
      - PrivateSubnetBCIDR
      - PrivateSubnetCCIDR

Resources:

  # Create VPC with three public and three private subnets, DHCP Options, IGW, VGW, and enable Flow Logs
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3-ap-southeast-2.amazonaws.com/${BuildBucket}/${VPCTemplateFile}
      Tags:
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
      - Key: Component
        Value: VPC
      Parameters:
        Environment: !Ref Environment
        BusinessUnit: !Ref BusinessUnit
        Department: !Ref Department
        Application: !Ref Application
        VPCOctet: !Ref VPCOctet
        VPCCIDR: !Ref VPCCIDR
        PublicSubnetACIDR: !Ref PublicSubnetACIDR
        PublicSubnetBCIDR: !Ref PublicSubnetBCIDR
        PublicSubnetCCIDR: !Ref PublicSubnetCCIDR
        PrivateSubnetACIDR: !Ref PrivateSubnetACIDR
        PrivateSubnetBCIDR: !Ref PrivateSubnetBCIDR
        PrivateSubnetCCIDR: !Ref PrivateSubnetCCIDR
        DNSServers: !Ref DNSServers
        DNSDomainName: !Ref DNSDomainName
        FlowLogsARN: arn:aws:iam::XXXXXXXXXXXX:role/Flow-Logs-Role

# Create custom route tables for public and private subnets
#   including enabling propagation from the Virtual Private Gateway
#   and creating an S3 Endpoint with routes
  RouteTables:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPC
    Properties:
      TemplateURL: !Sub https://s3-ap-southeast-2.amazonaws.com/${BuildBucket}/${RouteTableTemplateFile}
      Tags:
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
      - Key: Component
        Value: RouteTable
      Parameters:
        Environment: !Ref Environment
        BusinessUnit: !Ref BusinessUnit
        Department: !Ref Department
        Application: !Ref Application
        VPCID: !GetAtt [ VPC, Outputs.VPCID ]
        IGWID: !GetAtt [ VPC, Outputs.IGWID ]
        VGWID: !GetAtt [ VPC, Outputs.VGWID ]
        PublicSubnetA: !GetAtt [ VPC, Outputs.PublicSubnetA ]
        PublicSubnetB: !GetAtt [ VPC, Outputs.PublicSubnetB ]
        PublicSubnetC: !GetAtt [ VPC, Outputs.PublicSubnetC ]
        PrivateSubnetA: !GetAtt [ VPC, Outputs.PrivateSubnetA ]
        PrivateSubnetB: !GetAtt [ VPC, Outputs.PrivateSubnetB ]
        PrivateSubnetC: !GetAtt [ VPC, Outputs.PrivateSubnetC ]

# Create three NAT Gateways, one in each AZ
# Note that NAT Gateways do not support tags (as of Aug 2017)
  NATGateways:
    Type: AWS::CloudFormation::Stack
    DependsOn: RouteTables
    Properties:
      TemplateURL: !Sub https://s3-ap-southeast-2.amazonaws.com/${BuildBucket}/${NATGatewayTemplateFile}
      Tags:
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
      - Key: Component
        Value: NATGateway
      Parameters:
        PublicSubnetA: !GetAtt [ VPC, Outputs.PublicSubnetA ]
        PublicSubnetB: !GetAtt [ VPC, Outputs.PublicSubnetB ]
        PublicSubnetC: !GetAtt [ VPC, Outputs.PublicSubnetC ]
        PrivateARouteTable: !GetAtt [ RouteTables, Outputs.PrivateARouteTable ]
        PrivateBRouteTable: !GetAtt [ RouteTables, Outputs.PrivateBRouteTable ]
        PrivateCRouteTable: !GetAtt [ RouteTables, Outputs.PrivateCRouteTable ]

# Create custom NACLs, add rules, and associate with subnets
  NACLs:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPC
    Properties:
      TemplateURL: !Sub https://s3-ap-southeast-2.amazonaws.com/${BuildBucket}/${NACLTemplateFile}
      Tags:
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Department
        Value: !Ref Department
      - Key: Application
        Value: !Ref Application
      - Key: Component
        Value: NACL
      Parameters:
        Environment: !Ref Environment
        BusinessUnit: !Ref BusinessUnit
        Department: !Ref Department
        Application: !Ref Application
        VPCID: !GetAtt [ VPC, Outputs.VPCID ]
        VPCCIDR: !GetAtt [ VPC, Outputs.VPCCIDR ]
        PublicSubnetA: !GetAtt [ VPC, Outputs.PublicSubnetA ]
        PublicSubnetB: !GetAtt [ VPC, Outputs.PublicSubnetB ]
        PublicSubnetC: !GetAtt [ VPC, Outputs.PublicSubnetC ]
        PrivateSubnetA: !GetAtt [ VPC, Outputs.PrivateSubnetA ]
        PrivateSubnetB: !GetAtt [ VPC, Outputs.PrivateSubnetB ]
        PrivateSubnetC: !GetAtt [ VPC, Outputs.PrivateSubnetC ]


Outputs:

# VPC template outputs
  VPCID:
    Value: !GetAtt [ "VPC", "Outputs.VPCID" ]
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
    Description: ID of the VPC deployed
  VPCCIDR:
    Value: !GetAtt [ "VPC", "Outputs.VPCCIDR" ]
    Export:
      Name: !Sub "${AWS::StackName}-VPCCIDR"
    Description: The CIDR range for the VPC
  IGWID:
    Value: !GetAtt [ "VPC", "Outputs.IGWID" ]
    Export:
      Name: !Sub "${AWS::StackName}-IGWID"
    Description: IGW ID for the VPC
  VGWID:
    Value: !GetAtt [ "VPC", "Outputs.VGWID" ]
    Export:
      Name: !Sub "${AWS::StackName}-VGWID"
    Description: VGW ID for the VPC
  PublicSubnetA:
    Value: !GetAtt [ "VPC", "Outputs.PublicSubnetA" ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetA"
    Description: Public Subnet A ID
  PublicSubnetB:
    Value: !GetAtt [ "VPC", "Outputs.PublicSubnetB" ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetB"
    Description: Public Subnet B ID
  PublicSubnetC:
    Value: !GetAtt [ "VPC", "Outputs.PublicSubnetC" ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetC"
    Description: Public Subnet C ID
  PrivateSubnetA:
    Value: !GetAtt [ "VPC", "Outputs.PrivateSubnetA" ]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"
    Description: Private Subnet A ID
  PrivateSubnetB:
    Value: !GetAtt [ "VPC", "Outputs.PrivateSubnetB" ]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetB"
    Description: Private Subnet B ID
  PrivateSubnetC:
    Value: !GetAtt [ "VPC", "Outputs.PrivateSubnetC" ]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetC"
    Description: Private Subnet C ID

# Route Table Outputs
  S3Endpoint:
    Description: The ID Of the S3 Endpoint
    Value: !GetAtt [ "RouteTables", "Outputs.S3Endpoint" ]
    Export:
      Name: !Sub "${AWS::StackName}-S3EndpointID"
  PublicRouteTable:
    Description: The ID of the Public Route Table
    Value: !GetAtt [ "RouteTables", "Outputs.PublicRouteTable" ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTableId"
  PrivateARouteTable:
    Description: The ID of the Private A Route Table
    Value: !GetAtt [ "RouteTables", "Outputs.PrivateARouteTable" ]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateARouteTableId"
  PrivateBRouteTable:
    Description: The ID of the Private B Route Table
    Value: !GetAtt [ "RouteTables", "Outputs.PrivateBRouteTable" ]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBRouteTableId"
  PrivateCRouteTable:
    Description: The ID of the Private C Route Table
    Value: !GetAtt [ "RouteTables", "Outputs.PrivateCRouteTable" ]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateCRouteTableId"

# NAT Gateway Outputs
  NATEIPA:
    Description: The EIP used for the NAT Gateway A
    Value: !GetAtt [ "NATGateways", "Outputs.EIPA" ]
    Export:
      Name: !Sub "${AWS::StackName}-NATEIPA"
  NATEIPB:
    Description: The EIP used for the NAT Gateway B
    Value: !GetAtt [ "NATGateways", "Outputs.EIPB" ]
    Export:
      Name: !Sub "${AWS::StackName}-NATEIPB"
  NATEIPC:
    Description: The EIP used for the NAT Gateway C
    Value: !GetAtt [ "NATGateways", "Outputs.EIPC" ]
    Export:
      Name: !Sub "${AWS::StackName}-NATEIPC"
  NATGatewayA:
    Description: ID of Nat Gateway A
    Value: !GetAtt [ "NATGateways", "Outputs.NatGatewayA" ]
    Export:
      Name: !Sub "${AWS::StackName}-NatGatewayA"
  NATGatewayB:
    Description: ID of Nat Gateway B
    Value: !GetAtt [ "NATGateways", "Outputs.NatGatewayB" ]
    Export:
      Name: !Sub "${AWS::StackName}-NatGatewayB"
  NATGatewayC:
    Description: ID of Nat Gateway C
    Value: !GetAtt [ "NATGateways", "Outputs.NatGatewayC" ]
    Export:
      Name: !Sub "${AWS::StackName}-NatGatewayC"

# NACLs Outputs
  PublicNetworkACL:
    Description: The ID of the Public Network ACL
    Value: !GetAtt [ "NACLs", "Outputs.PublicNetworkACL" ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicNetworkACL"
  PrivateNetworkACL:
    Description: The ID of the Private Network ACL
    Value: !GetAtt [ "NACLs", "Outputs.PrivateNetworkACL" ]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateNetworkACL"

# DNS Outputs
  PrivateDomainName:
    Description: The Domain name of the Internal Hosted Zone
    Value: !Ref DNSDomainName
    Export:
      Name: !Sub "${AWS::StackName}-Private-DomainName"
