# Template created by hash
Description: Security Group for Bastion EC2 Instances

Parameters:

  VPCId:
    Description: The VPC Id
    Type: AWS::EC2::VPC::Id

  RDSSecurityGroup:
    Description: The RDS Security Group
    Type: AWS::EC2::SecurityGroup::Id

  KafkaSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  App1-phpSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  App2-phpSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  App3-javaSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  App4-phpSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  App5-phpSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  App6-phpSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  App7-phpSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  SomeOffice1:
    Type: String

  SomeOffice2:
    Type: String

  SomeOffice3:
    Type: String

  HassanSydney:
    Type: String

  HassanPakistan1:
    Type: String

  HassanPakistan2:
    Type: String

# Tagging Parameters
  Environment:
    Type: String
    AllowedValues:
      - Production
      - UAT
      - Test
  BusinessUnit:
    Type: String
    AllowedValues:
      - Charitable
      - Corporate
      - Gaming
      - Lotteries
      - Wagering
    ConstraintDescription: Must be Charitable | Corporate | Gaming | Lotteries | Wagering
  Department:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: BrandName
  Application:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: SomePlatform
  Component:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: Bastion

Resources:

  # Create Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${Environment} ${Component} Security Group
      VpcId: !Ref VPCId
      Tags:
      - Key: Name
        Value:  !Sub ${Environment}-${Component}
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Application
        Value: !Ref Application
      - Key: Component
        Value: !Ref Component

 # Add rules to Security Group

  #Allow SSH to Bastion from Some
  SSHfromSome1:
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
    IpProtocol: tcp
    ToPort: 22
    FromPort: 22
    CidrIp: !Ref SomeOffice1
    GroupId: !Ref SecurityGroup

  SSHfromSome2:
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
    IpProtocol: tcp
    ToPort: 22
    FromPort: 22
    CidrIp: !Ref SomeOffice2
    GroupId: !Ref SecurityGroup

  SSHfromSome3:
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
    IpProtocol: tcp
    ToPort: 22
    FromPort: 22
    CidrIp: !Ref SomeOffice3
    GroupId: !Ref SecurityGroup

  # Hassan ACCESS. COMMENT OR UNCOMMENT THESE THREE RULES TO CONTROL Hassan' ACCESS TO THE BASTION HOST
  SSHfromHassanSydney:
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
    IpProtocol: tcp
    ToPort: 22
    FromPort: 22
    CidrIp: !Ref HassanSydney
    GroupId: !Ref SecurityGroup

  SSHfromPakistan1:
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
    IpProtocol: tcp
    ToPort: 22
    FromPort: 22
    CidrIp: !Ref HassanPakistan1
    GroupId: !Ref SecurityGroup

  SSHfromPakistan2:
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
    IpProtocol: tcp
    ToPort: 22
    FromPort: 22
    CidrIp: !Ref HassanPakistan2
    GroupId: !Ref SecurityGroup

  # Access to RDS DB - this adds a rule to the RDS Security Group
#  DBIngressRule:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      IpProtocol: tcp
#      FromPort: 3306
#      ToPort: 3306
#      SourceSecurityGroupId: !Ref SecurityGroup
#      GroupId: !Ref RDSSecurityGroup

  # Access to Kafka
  KafkaSSHIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref KafkaSecurityGroup

  App1-phpSSHIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref App1-phpSecurityGroup

#  App2-phpSSHIngressRule:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      IpProtocol: tcp
#      FromPort: 22
#      ToPort: 22
#      SourceSecurityGroupId: !Ref SecurityGroup
#      GroupId: !Ref App2-phpSecurityGroup
#
#  App3-javaSSHIngressRule:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      IpProtocol: tcp
#      FromPort: 22
#      ToPort: 22
#      SourceSecurityGroupId: !Ref SecurityGroup
#      GroupId: !Ref App3-javaSecurityGroup
#
#  App4-phpSSHIngressRule:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      IpProtocol: tcp
#      FromPort: 22
#      ToPort: 22
#      SourceSecurityGroupId: !Ref SecurityGroup
#      GroupId: !Ref App4-phpSecurityGroup
#
#  App5-phpSSHIngressRule:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      IpProtocol: tcp
#      FromPort: 22
#      ToPort: 22
#      SourceSecurityGroupId: !Ref SecurityGroup
#      GroupId: !Ref App5-phpSecurityGroup
#
#  App6-phpSSHIngressRule:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      IpProtocol: tcp
#      FromPort: 22
#      ToPort: 22
#      SourceSecurityGroupId: !Ref SecurityGroup
#      GroupId: !Ref App6-phpSecurityGroup
#
#  App7-phpSSHIngressRule:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      IpProtocol: tcp
#      FromPort: 22
#      ToPort: 22
#      SourceSecurityGroupId: !Ref SecurityGroup
#      GroupId: !Ref App7-phpSecurityGroup

Outputs:
  SecurityGroup:
    Description: The Bastion Security Group
    Value: !Ref SecurityGroup
