# Template created by hash
Description: Security Group for Internet-Facing Load Balancer

Parameters:

  VPCId:
    Type: AWS::EC2::VPC::Id

  NATGatewayAzA:
    Type: String

  NATGatewayAzB:
    Type: String

  NATGatewayAzC:
    Type: String

  SomeOffice1:
    Type: String

  SomeOffice2:
    Type: String

  HassanSydney:
    Type: String

  HassanPakistan1:
    Type: String

  HassanPakistan2:
    Type: String

# Tagging Parameters
  Environment:
    Type: String
    AllowedValues:
      - Production
      - NonProduction
      - UAT
      - Test
  BusinessUnit:
    Type: String
    AllowedValues:
      - Charitable
      - Corporate
      - Gaming
      - Lotteries
      - Wagering
    ConstraintDescription: Must be Charitable | Corporate | Gaming | Lotteries | Wagering
  Department:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: BrandName
  Application:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: SomePlatform
  Component:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: ELB-Public

Conditions:
  IsProduction: !Or [!Equals [ !Ref Environment, "Production" ], !Equals [ !Ref Environment, "UAT" ] ]
  IsTest: !Equals [ !Ref Environment, "Test" ]

Resources:

# Create Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Elastic Load Balancer ${Component} Security Group
      VpcId: !Ref VPCId
      Tags:
      - Key: Name
        Value: !Sub ${Environment}-${Component}-ELB
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Application
        Value: !Ref Application
      - Key: Component
        Value: !Ref Component

# Add rules to Security Group

# PRODUCTION and UAT RULES
  # HTTP from any
  Ingress80Any:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsProduction
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
      GroupId: !Ref SecurityGroup

  # HTTPS from anywhere
  Ingress443Any:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsProduction
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
      GroupId: !Ref SecurityGroup

# NON-PRODUCTION RULES

  Ingress80NATGatewayAzA:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Sub ${NATGatewayAzA}/32
      GroupId: !Ref SecurityGroup

  Ingress80NATGatewayAzB:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Sub ${NATGatewayAzB}/32
      GroupId: !Ref SecurityGroup

  Ingress80NATGatewayAzC:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Sub ${NATGatewayAzC}/32
      GroupId: !Ref SecurityGroup

  Ingress80SomeOffice1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Ref SomeOffice1
      GroupId: !Ref SecurityGroup

  Ingress80SomeOffice2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Ref SomeOffice2
      GroupId: !Ref SecurityGroup

  Ingress80HassanSydney:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Ref HassanSydney
      GroupId: !Ref SecurityGroup

  Ingress80HassanPakistan1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Ref HassanPakistan1
      GroupId: !Ref SecurityGroup

  Ingress80HassanPakistan2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Ref HassanPakistan2
      GroupId: !Ref SecurityGroup

  Ingress443NATGatewayAzA:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Sub ${NATGatewayAzA}/32
      GroupId: !Ref SecurityGroup

  Ingress443NATGatewayAzB:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Sub ${NATGatewayAzB}/32
      GroupId: !Ref SecurityGroup

  Ingress443NATGatewayAzC:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Sub ${NATGatewayAzC}/32
      GroupId: !Ref SecurityGroup

  Ingress443SomeOffice1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Ref SomeOffice1
      GroupId: !Ref SecurityGroup

  Ingress443SomeOffice2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Ref SomeOffice2
      GroupId: !Ref SecurityGroup

  Ingress443HassanSydney:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Ref HassanSydney
      GroupId: !Ref SecurityGroup

  Ingress443HassanPakistan1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Ref HassanPakistan1
      GroupId: !Ref SecurityGroup

  Ingress443HassanPakistan2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsTest
    Properties:
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: !Ref HassanPakistan2
      GroupId: !Ref SecurityGroup

Outputs:
  SecurityGroup:
    Description: The Load Balancer Security Group ID
    Value:  !Ref SecurityGroup
