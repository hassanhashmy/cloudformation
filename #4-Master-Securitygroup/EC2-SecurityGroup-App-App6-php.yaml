# Template created by hash
Description: Security Group for App6-php EC2 Instances

Parameters:

  VPCId:
    Description: The VPC Id
    Type: AWS::EC2::VPC::Id

  ELBSecurityGroup:
    Description: The ELB Security Group for the App6-php ELB
    Type: AWS::EC2::SecurityGroup::Id

  ElastiCacheSecurityGroup:
    Description: The ElastiCache Security Group
    Type: AWS::EC2::SecurityGroup::Id

  RDSSecurityGroup:
    Description: The RDS Security Group
    Type: AWS::EC2::SecurityGroup::Id

  KafkaSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

# Tagging Parameters
  Environment:
    Type: String
    AllowedValues:
      - Production
      - UAT
      - Test
  BusinessUnit:
    Type: String
    AllowedValues:
      - Charitable
      - Corporate
      - Gaming
      - Lotteries
      - Wagering
    ConstraintDescription: Must be Charitable | Corporate | Gaming | Lotteries | Wagering
  Department:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: BrandName
  Application:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: SomePlatform
  Component:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: App6-php

Resources:

  # Create Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Application ${Component} Security Group
      VpcId: !Ref VPCId
      Tags:
      - Key: Name
        Value:  !Sub ${Environment}-${Component}-App
      - Key: Environment
        Value: !Ref Environment
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Application
        Value: !Ref Application
      - Key: Component
        Value: !Ref Component

 # Add rules to Security Group

#  IngressAllVPC:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      IpProtocol: -1
#      CidrIp: !Ref VPCCIDR
#      GroupId: !Ref SecurityGroup

  #Allow Traffic from ELB to Application
  HTTPSELBIngressRule:
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
    IpProtocol: tcp
    ToPort: 443
    FromPort: 443
    SourceSecurityGroupId: !Ref ELBSecurityGroup
    GroupId: !Ref SecurityGroup

  # Allow health check from ELB
  HTTPELBIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      ToPort: 80
      FromPort: 80
      SourceSecurityGroupId: !Ref ELBSecurityGroup
      GroupId: !Ref SecurityGroup

  # Access to ElastiCache - this adds a rule to the ElastiCache Security Group
  ElastiCacheIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '6379'
      ToPort: '6379'
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref ElastiCacheSecurityGroup

  # Access to RDS DB - this adds a rule to the RDS Security Group
  DBIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref RDSSecurityGroup

  # Access to Kafka
  Kafka2181IngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2181
      ToPort: 2181
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref KafkaSecurityGroup

  Kafka9092IngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9092
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref KafkaSecurityGroup

  # Access from UAT Bastion Host Security Group. Temporary for troubleshooting purposes only
  BastionHostIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      SourceSecurityGroupId: sg-6b258c0d
      GroupId: !Ref SecurityGroup

Outputs:
  SecurityGroup:
    Description: The App App6-php Security Group
    Value:  !Ref SecurityGroup
