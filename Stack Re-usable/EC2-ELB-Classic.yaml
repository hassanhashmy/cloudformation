# Template created by hash
Description: Classic Elastic Load Balancer
Parameters:

  ConnectionDrainingTimeout:
    Type: Number
    MinValue: '0'
    MaxValue: '3600'

  InstancePort:
    Type: Number

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  Scheme:
    Type: String
    AllowedValues:
    - internet-facing
    - internal

  InstanceProtocol:
    Type: String
    AllowedValues:
    - HTTP
    - HTTPS
    - TCP
    - SSL

  HealthTimeout:
    Type: String

  2ndLoadBalancerProtocol:
    Type: String
    AllowedValues:
    - HTTP
    - HTTPS
    - TCP
    - SSL

  CreateLoggingBucket:
    Type: String
    AllowedValues:
    - 'true'
    - 'false'

  LogBucketName:
    Type: String

  S3BucketPrefix:
    Type: String

  AppCookieName:
    Type: String

  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>

  HealthInterval:
    Type: Number

  HealthTarget:
    Type: String

  UnhealthyThreshold:
    Type: Number

  HealthyThreshold:
    Type: Number

  ASGTargets:
    Type: String
    AllowedValues:
    - 'true'
    - 'false'

  SSLCertArn:
    Type: String

  CrossZone:
    Type: String
    AllowedValues:
    - 'true'
    - 'false'

  CookieExpirationPeriod:
    Type: String

  2ndInstancePort:
    Type: Number

  LoadBalancerPort:
    Type: Number

  Instances:
    Type: CommaDelimitedList

  TimeOut:
    Type: Number
    MinValue: '0'
    MaxValue: '3600'

  2ndLoadBalancerPort:
    Type: Number

  2ndInstanceProtocol:
    Type: String
    AllowedValues:
    - HTTP
    - HTTPS
    - TCP
    - SSL

  SecondaryListener:
    Type: String
    AllowedValues:
    - 'true'
    - 'false'

  LoadBalancerProtocol:
    Type: String
    AllowedValues:
    - HTTP
    - HTTPS
    - TCP
    - SSL

# Tagging Parameters
  Environment:
    Type: String
    AllowedValues:
      - Production
      - NonProduction
      - UAT
      - Test
  BusinessUnit:
    Type: String
    AllowedValues:
      - Charitable
      - Corporate
      - Gaming
      - Lotteries
      - Wagering
    ConstraintDescription: Must be Charitable | Corporate | Gaming | Lotteries | Wagering
  Department:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: BrandName
  Application:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: SomePlatform
  Component:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: ELB-Classic

Conditions:
  AppCookieStickinessPolicy: !Not [!Equals [!Ref 'AppCookieName', '']]
  isELB2ndListener: !Equals [!Ref 'SecondaryListener', 'true']
  CookieStickinessPolicy: !Not [!Or [!Equals [!Ref 'CookieExpirationPeriod', ''], {Condition: AppCookieStickinessPolicy}]]
  isELBConnectionDrain: !Not [!Equals [!Ref 'ConnectionDrainingTimeout', '0']]
  isInternal: !Equals [!Ref 'Scheme', internal]
  SSLEnabled: !Or [!Equals [!Ref 'LoadBalancerProtocol', SSL], !Equals [!Ref 'LoadBalancerProtocol', HTTPS]]
  isELBLogging: !Not [!Equals [!Ref LogBucketName, '']]
  isTimeout: !Not [!Equals [!Ref 'TimeOut', '0']]
  SSL2ndEnabled: !Or [!Equals [!Ref '2ndLoadBalancerProtocol', SSL], !Equals [!Ref '2ndLoadBalancerProtocol', HTTPS]]
#  NewS3Bucket: !Equals [!Ref 'CreateLoggingBucket', 'true']
  isNotASG: !Equals [!Ref 'ASGTargets', 'false']

Resources:

  # Create Classic Load Balancer
  ELBv1:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AppCookieStickinessPolicy:
      - !If [AppCookieStickinessPolicy, {PolicyName: AppCookieBasedPolicy, CookieName: !Ref 'AppCookieName'}, !Ref 'AWS::NoValue']
      ConnectionDrainingPolicy: !If [isELBConnectionDrain, {Enabled: true, Timeout: !Ref 'ConnectionDrainingTimeout'}, !Ref 'AWS::NoValue']
      AccessLoggingPolicy: !If [isELBLogging, {S3BucketPrefix: !Ref S3BucketPrefix, Enabled: true, S3BucketName: !Ref LogBucketName, EmitInterval: 5}, !Ref 'AWS::NoValue']
      Tags:
      - Key: Environment
        Value: !Ref Environment
      - Key: Name
        Value: !Sub ${Environment}-${Component}
      - Key: BusinessUnit
        Value: !Ref BusinessUnit
      - Key: Application
        Value: !Ref Application
      - Key: Component
        Value: !Ref Component
      HealthCheck:
        HealthyThreshold: !Ref HealthyThreshold
        Interval: !Ref HealthInterval
        Target: !Ref HealthTarget
        Timeout: !Ref HealthTimeout
        UnhealthyThreshold: !Ref UnhealthyThreshold
      LBCookieStickinessPolicy:
      - !If [CookieStickinessPolicy, {PolicyName: CookieBasedPolicy, CookieExpirationPeriod: !Ref 'CookieExpirationPeriod'}, !Ref 'AWS::NoValue']
      Subnets: !Ref Subnets
      Instances: !If [isNotASG, !Ref Instances, !Ref 'AWS::NoValue']
      Listeners:
        Fn::If:
        - isELB2ndListener
        -
          - InstancePort: !Ref InstancePort
            Protocol: !Ref LoadBalancerProtocol
            InstanceProtocol: !Ref InstanceProtocol
            LoadBalancerPort: !Ref LoadBalancerPort
            PolicyNames:
              - !If [CookieStickinessPolicy, CookieBasedPolicy, !Ref 'AWS::NoValue']
              - !If [AppCookieStickinessPolicy, AppCookieBasedPolicy, !Ref 'AWS::NoValue']
            SSLCertificateId: !If [SSLEnabled, !Ref SSLCertArn, !Ref 'AWS::NoValue']
          - InstancePort: !Ref 2ndInstancePort
            Protocol: !Ref 2ndInstanceProtocol
            InstanceProtocol: !Ref 2ndInstanceProtocol
            LoadBalancerPort: !Ref 2ndLoadBalancerPort
            PolicyNames:
              - !If [CookieStickinessPolicy, CookieBasedPolicy, !Ref 'AWS::NoValue']
              - !If [AppCookieStickinessPolicy, AppCookieBasedPolicy, !Ref 'AWS::NoValue']
            SSLCertificateId: !If [SSL2ndEnabled, !Ref SSLCertArn, !Ref 'AWS::NoValue']
        -
          - InstancePort: !Ref InstancePort
            Protocol: !Ref LoadBalancerProtocol
            InstanceProtocol: !Ref InstanceProtocol
            LoadBalancerPort: !Ref LoadBalancerPort
            PolicyNames:
              - !If [CookieStickinessPolicy, CookieBasedPolicy, !Ref 'AWS::NoValue']
              - !If [AppCookieStickinessPolicy, AppCookieBasedPolicy, !Ref 'AWS::NoValue']
            SSLCertificateId: !If [SSLEnabled, !Ref SSLCertArn, !Ref 'AWS::NoValue']
      CrossZone: !Ref CrossZone
      SecurityGroups: !Ref SecurityGroups
      ConnectionSettings: !If [isTimeout, {IdleTimeout: !Ref TimeOut}, !Ref 'AWS::NoValue']
      LoadBalancerName: !Sub ${Environment}-${Component} # Cannot be more then 32 characters (as of Sept 2017)
      Scheme: !Ref Scheme

  UnHealthyHostCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '10'
      Dimensions:
      - Name: LoadBalancerName
        Value: !Ref 'ELBv1'
      AlarmDescription: Unhealthy Host count is above threshold
      Namespace: AWS/ELB
      Period: '60'
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Threshold: '1'
      Unit: Count
      MetricName: UnHealthyHostCount

Outputs:
  UnHealthyHostCountAlarm:
    Description: UnHealthy Host Count Alarm Name.
    Value: !Ref 'UnHealthyHostCountAlarm'
#  S3BucketName:
#    Value: !Ref 'S3BucketwithLogging'
#    Description: S3 Logging Bucket Name.
#    Condition: NewS3Bucket
  ELBv1:
    Description: Elastic Load Balancer ID
    Value: !Ref 'ELBv1'

  ELBDNSName:
    Description:  ELB DNS name
    Value: !GetAtt [ELBv1, DNSName]

  ELBCanonicalHostedZoneId:
    Description: ELB Canonical Hosted Zone ID
    Value: !GetAtt [ ELBv1, CanonicalHostedZoneNameID ]
