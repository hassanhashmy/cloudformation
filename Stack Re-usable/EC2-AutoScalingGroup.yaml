# Template created by hash
Description: AutoScalingGroup for DCHash2 EC2 Instances

Parameters:

  #Auto Scaling Group Specific Parameters
  LaunchConfiguration:
    Type: String

  #The name of the load balancer to associate with Auto Scaling Group:
  #For ELB use name for ALB use TargetGroupARNs
  LoadBalancerName:
    Type: String

  #The length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health.
  #This is specific to each application
  HealthCheckGracePeriod:
    Type: Number

   #The Minimum number of EC2 instance in the Auto Scaling Group
  MinSize:
    Type: Number

  #The Maximum number of EC2 instance in the Auto Scaling Group
  MaxSize:
    Type: Number

  DesiredCapacity:
    Type: Number

  # Update Policy Settings
  UpdateMin:
    Type: Number

  UpdateMaxBatchSize:
    Type: Number

  PauseTime:
    Type: String

  VPCSubnetList:
    Type: List<AWS::EC2::Subnet::Id>

  # Tagging Parameters
  Environment:
    Type: String
    AllowedValues:
      - Production
      - UAT
      - Test

  BusinessUnit:
    Type: String
    AllowedValues:
      - Charitable
      - Corporate
      - Gaming
      - Lotteries
      - Wagering
    ConstraintDescription: Must be Charitable | Corporate | Gaming | Lotteries | Wagering

  Department:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: BrandName

  Application:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: SomePlatfrom

  Component:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    Default: ASG

Resources:

  AutoScalingGroup:
# Commented out until we have details
#    UpdatePolicy:
#      AutoScalingRollingUpdate:
#        MinInstancesInService: !Ref UpdateMin
#        MaxBatchSize: !Ref UpdateMaxBatch
#        PauseTime: !Sub PT${PauseTime}
#        WaitOnResourceSignals: true
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ""
      HealthCheckType: ELB
      HealthCheckGracePeriod: !Ref HealthCheckGracePeriod
      LaunchConfigurationName: !Ref LaunchConfiguration
      LoadBalancerNames:
        - !Ref LoadBalancerName
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier: !Ref VPCSubnetList
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${Component}
          PropagateAtLaunch: True
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: True
        - Key: BusinessUnit
          Value: !Ref BusinessUnit
          PropagateAtLaunch: True
        - Key: Application
          Value: !Ref Application
          PropagateAtLaunch: True
        - Key: Component
          Value: !Ref Component
          PropagateAtLaunch: True

  # NOTE:
  # As LifeCycle Hooks is defined after auto scaling group there is a race condition and the first batch of auto scaling instances
  # will not always apply the lifecycle hook and stop in the Wait:pending state
  # See: https://forums.aws.amazon.com/message.jspa?messageID=701967
  AutoScalingLifeCycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING

      # TargetGroupARNs:
      #   - String

  # TODO - Application Specific
  # Define scaling policy based on application requirements
  # Consider Target Tracking Policies when it becomes available via CloudFormation
  # Uses:
  # - 75% Average CPU Utilisation -> Scale Up (over 3 minutes)
  # - 30% Average CPU Utilisation -> Scale Down (over 5 minutes)

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 120
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 120
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 75
      Period: 180
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 30
      AlarmDescription: Alarm if CPU too low or metric disappears indicating instance is down
      Period: 300
      AlarmActions:
      - Ref: ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization


Outputs:

  AutoScalingGroup:
    Description: The identifier of the Auto Scaling Group
    Value: !Ref AutoScalingGroup
